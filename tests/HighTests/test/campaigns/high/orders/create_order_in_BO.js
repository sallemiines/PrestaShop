scenario('Create order in BO', client => {
  test('should open the browser', () => client.open());
  test('should sign in BO', () => client.signinBO());
  test('should go to orders list', () => client.goToOrdersList());
  test('should create new order', () => client.clickOnAddNewOrderButton());
  test('should search for a customer', () => client.searchCustumer('john doe'));
  test('should search for a product by name', () => client.searchProduct('Printed Dress'));
  test('should select the product type', () => client.selectProductType('3'));
  test('should select the product combination', () => client.selectProductCombination('13'));
  test('should select the product quantity', () => client.addProductQuantity('4'));
  test('should click on add to cart button', () => client.clickOnAddToCartButton());
  test('should get the basic product price', () => client.getBasicPriceValue());
  test('should select delivery option ', () => client.selectDelivery());
  test('should check the shipping price ', () => client.checkShippingPrice('8.4'));
  test('should add an order message ', () => client.addOrderMessage('Order message test'));
  test('should select a payment type ', () => client.selectPayment());
  test('should select an order status ', () => client.selectOrderStatus());
  test('should create the order', () => client.clickOnCreateOrder());
}, "order_bo_client");
scenario('Check order in BO', client => {
  test('should status be equal to Payment accepted', () => client.checkOrderStatus('Payment accepted'));
  test('should update order status to Awaiting check payment ', () => client.updateStatus('1'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Awaiting check payment', () => client.checkOrderStatus('Awaiting check payment', '[1]'));
  test('should update order status to Awaiting bank wire payment ', () => client.updateStatus('10'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Awaiting bank wire payment', () => client.checkOrderStatus('Awaiting bank wire payment', '[1]'));
  test('should update order status to Refunded ', () => client.updateStatus('7'));
  test('should click on update order status button ', () => client.clickOnUpdateStatusButton());
  test('should status be equal to Refunded', () => client.checkOrderStatus('Refunded', '[1]'));
  test('should check the shipping cost', () => client.checkShippingCost('â‚¬8.40'));
  test('should check order message', () => client.checkOrderMessage('Order message test'));
  test('should check payment type ', () => client.checkPayment('Payments by check'));
  test('should check the product informations', () => client.checkProductInformations('Orange', 'Printed Dress', 'demo3', 'S'));
  test('should check quantity ', () => client.checkQuantity('4'));
  test('should check basic price ', () => client.checkBasicPrice());
  test('should check customer name ', () => client.checkCustomer('John DOE'));
  test('should sign out BO', () => client.signoutBO());
}, 'order_bo_client', true);
